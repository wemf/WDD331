//variables to setup basic size and shape of the card and pips
$card-width: 40vw;
$card-height: $card-width*1.4;
$font-size-number: $card-width * 0.1;
$icon-size: $card-width / 5;
$color-green: #1c8133;
$color-white: #ffffff;
$num-columns : 8;
$one-column : 100% / $num_columns;
$loop-start: 1;
$loop-end: $num-columns +1;

@mixin col($span-num) {
  flex: 0 0 $one-column * $span-num;
}

@mixin offset($offset-num) {
  margin-left: $one-column * $offset-num;
}

*,
*:before,
*:after {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  display: flex;
  align-items: center;
  justify-content: center;
  background-color: $color-green;
  overflow: hidden;
}

//styles to draw a basic outline of a card
.card {
  border: 1px solid grey;
  height: $card-height;
  width: $card-width;
  border-radius: 10px;
  margin: 20px;
  box-shadow: 2px 2px 4px grey;
  background-color: $color-white;
}

//because it is a card front we want a bit of extra padding
.card-front {
  padding: .5em;
}

//set icon size
.icon {
  width: $icon-size;
  height: $icon-size;
}

.number {
  text-align: center;
  font-size: $font-size-number;
  //an icon that is part of a number should be half the normal size
  & > .icon {
    width: $icon-size * .5;
    height: $icon-size *.5;
  }
}

//rotate bottom pips 180deg
.rotate {
  transform: rotate(180deg);
}

@supports (display: grid) {
	// Grid SCSS code here.            
  // parent used for grid display
  .row {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    grid-template-rows: repeat(4, 1fr);
    grid-column-gap: 10px;
    grid-row-gap: 10px;
    height: $card-height - 1;
  }

  // grid childs without modifying the html
  .row div:nth-child(1) { grid-area: 1 / 1 / 2 / 2; }
  .row div:nth-child(2) { grid-area: 1 / 2 / 2 / 3; }
  .row div:nth-child(3) { grid-area: 1 / 4 / 2 / 5; }
  .row div:nth-child(4) { grid-area: 2 / 3 / 3 / 4; }
  .row div:nth-child(5) { grid-area: 3 / 2 / 4 / 3; }
  .row div:nth-child(6) { grid-area: 3 / 4 / 4 / 5; }
  .row div:nth-child(7) { grid-area: 4 / 2 / 5 / 3; }
  .row div:nth-child(8) { grid-area: 4 / 4 / 5 / 5; }
  .row div:nth-child(9) { grid-area: 4 / 5 / 5 / 6; }
 
}

@supports not (display: grid) {
	//flexbox SCSS code here.
  .row {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    align-content: space-between;
    height: 100%;
  }

  .cell {
    flex: 1;
    text-align: center;
  }

  //make column classes 
  @for $index from $loop-start to $loop-end {
    .col-#{$index} {
      @include col($index);
    }
  }

  //make offset classes
  @for $index from $loop-start to $loop-end {
    .offset-#{$index} {
      @include offset($index);
    }
  }
}

